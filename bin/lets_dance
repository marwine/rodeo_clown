#!/usr/bin/env ruby

ENV["RACK_ENV"] ||= "development"

require "pry"
require "./lib/rodeo_clown"

RodeoClown.env = ENV["RACK_ENV"]


def print_instructions
  puts "RACK_ENV=[test] lets_dance! /path/to/yml role"
  exit 1 
end

def build_instances(options, count = nil)
  if count
    options = options.merge(count: count)
  end

  rc = RodeoClown::EC2.new
  rc.many_from_options(options)
  rc.build_instances(count) # Build one
end

def create_images(instances, prefix)
  images = instances.map do |instance|
    image_name = [ Date.today.strftime("%Y-%m-%d"), prefix ].join("_")
    adjuster   = 0
    begin
      instance.create_image("#{adjuster}#{image_name}")
    rescue AWS::EC2::Errors::InvalidAMIName::Duplicate
      adjuster += 1
      print "Error with image name, attempting: #{adjuster}#{image_name}"
      retry
    end
  end
  puts "waiting for images to become available"
  while images.any? { |i| i.state != :available }
    print "."
    sleep 1
  end

  images
end

########
########
########
########

begin
  role    = ARGV[1] 

  if role.nil?
    print_instructions
    exit
  end

  options = YAML.load_file("./ranch_hands.yml")[RodeoClown.env][role]
  deploy_opts = options.delete "deployment"

  elbs = options.delete "elbs"
end

# 5 Hookup-server
def register(app_name, elb_name)
  instance = RodeoClown::EC2.by_tags "Name" => app_name

  elb = RodeoClown::ELB.by_name(elb_name)
  elb.register_and_wait instance
end

# Build the first one
instances = build_instances(options, 1)
puts "Primary Instance built"

# Deploy
instances.each do |instance|
  puts "Waiting for ssh"
  print "." until instance.ssh_open?
  puts

  RodeoClown::Deploy.on(
    env: { "DOMAIN" => instance.dns_name, "APP" => deploy_opts["app"], },
    setup: deploy_opts["setup"],
    strategy: "mina",
  )
end

instances.each &:reboot
elb_name    = elbs.first
app_name    = options["tags"]["Name"]
register(app_name, elb_name)

puts "************************\n" * 5
puts "Go check your elb #{elb} or instance to see if its working"
puts "Press any key to start image creation process"
puts "************************\n" * 5

# Create images
images = create_images(instances, deploy_opts["app"])

# Create instance from image
new_instances = build_instances(options.merge("image_id" => images.first.id))

register(app_name, elb_name)

puts "Apps Deployed"
